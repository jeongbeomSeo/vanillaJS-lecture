.momentum-main {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* 위의 방식으로 중앙에 놓고 싶다면 position: absolute가 필수다. */
}

.container-top {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-bottom: 60px;
}

.container__clock {
  display: flex;
  position: relative;
  width: 500px;
  color: white;
  justify-content: center;
  align-items: center;
}

.container__clock span {
  font-size: 150px;
  font-weight: 600;
}

.container__clock i {
  position: absolute;
  width: 50px;
  height: 50px;
  justify-content: center;
  align-items: center;
  font-size: 30px;
  cursor: pointer;
  left: 1px;
  display: none;
}
/* container안에 두가지 content가 있고 한 content를 다른 content의 영향(크기) 없이 중앙에 위치시키고 싶을때
    -> 같은 container안에 있는 content가 공간에 영향을 안 주게끔 하면된다 -> display fixed or absolute */
.container__clock:hover i {
  display: flex;
}
/* display:none은 transition이 먹히지 않는다.
  => 일단 HTML과 CSS를 파싱후에 각각 DOM, CSSOM이 생성될 것이다. 
  DOM과 CSSOM을 결합하여 렌더링 트리를 형성한다. 이 렌더링 트리는 화면에 출력될 요소들의 레이아웃을 계산하는 데 사용되고 픽셀을 화면에 렌더링하는 페인트 프로세스에 대한 입력으로 처리된다.
  이때, 렌더링 트리는 화면에 출력되지 않아도 될 일부 노드(meta, script 등)와 CSS를 통해 숨겨지는 노드가 렌더링 트리에서 생략된다.
  transition은 두 상태에서 속성의 변화가 일정 기간에 걸쳐 일어나도록 하지만 display: none 상태에서 동적으로 클래스를 추가하여 display: block을 추가한다고 하면 렌더 트리에 없다가 추가되는 것이기 때문에 transition의 처음 시작점이 없다. 
  그래서 시각적으로 transition이 동작되지 않는 것처럼 보이는 것이다.  */
.container__clock i:hover {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
}

.container__greeting {
  display: flex;
  justify-content: center;
}

.greeting__input-text {
  border: none;
  outline: none;
  width: 450px;
  margin-right: 10px;
  border-bottom: 2px solid #ecf0f1;
  color: var(--clouds-color);
  font-size: 30px;
  font-weight: 600;
}

.greeting__input-text::placeholder {
  text-align: center;
  color: var(--clouds-color);
}

.greeting-span {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 50px;
  font-weight: 600;
  color: white;
}

.container-bottom {
  width: 100%;
}

.container__notification {
  text-align: center;
}

.notification__form {
  display: none;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.notification__form span {
  display: block;
  color: white;
  font-size: 35px;
  width: 800px;
}

.notification__form input {
  border: none;
  outline: none;
  border-bottom: 1px solid white;
  width: 500px;
  font-size: 25px;
  padding: 10px 0;
  color: white;
  text-align: center;
  background: none;
}

.notification {
  display: none;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.notification__day {
  color: white;
  font-size: 25px;
  font-weight: 600;
  margin-bottom: 10px;
}

.notification__task {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Making checkbox method number 1 
이 방식은 배경이 바뀌어도 유용하게 쓰인다.
즉 checkbox border 안에 부분은 채워져 있지 않아 주위 배경과 동화되어 있다. 
둘다 해본 결과 첫번째 것이 더 좋아 보인다.*/
.checkbox {
  cursor: pointer;
  position: relative;
}

.checkbox input {
  display: none;
}

.checkbox span::before {
  content: "";
  width: 20px;
  height: 20px;
  border: 2px solid white;
  border-radius: 5px;
  box-sizing: border-box;
  position: absolute;
  left: -20px;
  bottom: -12px;
}

.checkbox span::after {
  content: "";
  width: 15px;
  height: 6px;
  border-bottom: 5px solid white;
  border-left: 5px solid white;
  transform: rotate(-50deg);
  position: absolute;
  left: -19px;
  top: -6px;
  display: none;
}

.checkbox input:checked + span::after {
  display: block;
}
/* 
Making checkbox method number 2
.checkbox {
  cursor: pointer; => 의미 없는 행위 cursor은 input에 씌우는 것이 맞다. 
  border: 2px solid white;
  position: relative;
  width: 20px;
  height: 20px;
  overflow: hidden;
  border-radius: 3px;
}

.checkbox input {
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
}

.checkbox span {
  position: absolute;
  left: 5px;
  top: -1px;
  width: 8px;
  height: 16px;
  border-bottom: 3px solid white;
  border-right: 3px solid white;
  transform: rotate(50deg);
  display: none;
}

.checkbox input:checked + span {
  display: block;
} */

/* .checkbox input:checked .notification__received-message {
  text-decoration: line-through;
  => CSS만으로 부모선택자를 선택 할 수 없다.
} */

.notification__message {
  margin: 0 10px;
  color: white;
  font-size: 20px;
  font-weight: 600;
}

.notification__option {
  display: flex;
  color: white;
  font-size: 20px;
  width: 30px;
  height: 30px;
  align-items: center;
  justify-content: center;
  position: relative;
}

.option__clear {
  color: black;
  position: absolute;
  width: 100px;
  padding: 18px;
  top: 30px;
  left: 20px;
  background-color: #f1f1f1;
  border-radius: 10px;
  box-shadow: -2px 2px 10px 1px rgba(0, 0, 0, 0.2);
  border-top-left-radius: 0;
  height: 0;
  display: none;
  transition: 0.4s linears;
  justify-content: center;
  align-items: center;
}

.active {
  display: flex;
}

.option__clear span {
  display: inline;
}

.option__clear span:first-child {
  margin-right: 10px;
}
